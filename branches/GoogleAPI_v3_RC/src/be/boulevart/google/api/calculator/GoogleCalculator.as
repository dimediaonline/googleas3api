/** * GOOGLE API - AS3 LIBRARY * * @author Joris Timmerman * @version 3.0 * * GoogleCalculator - use the Google Calculator in your application to make advanced math calculations * Build by Joris Timmerman, this class uses an unofficial Google API. * You are solely responsible for its use, and I urge you not to abuse the Google Calculator API or use it for commercial projects. * * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE WEBSERVICES * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) */package be.boulevart.google.api.calculator {	import be.boulevart.google.api.calculator.data.GoogleCalculation;	import be.boulevart.google.api.core.GoogleAPIServiceURL;	import be.boulevart.google.api.core.GoogleAPISettings;	import be.boulevart.google.events.GoogleAPIErrorEvent;	import be.boulevart.google.events.GoogleAPIEvent;	import be.boulevart.google.utils.APIUtil;		import com.adobe.serialization.json.JSON;	import com.adobe.utils.StringUtil;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.utils.escapeMultiByte;
	/**	 * Use the Google Calculator to calculate advanced math expressions	 * Based upon an unofficial API, you are solely responsible for its use, and I urge you not to abuse the Google Calculator API or use it for commercial projects.	 * @author Joris Timmerman	 *	 */	public class GoogleCalculator extends EventDispatcher {		/**		 * Calculate a math expression (like 1+2) using the Google Calculator		 * @param operation Math expression to calculate		 */		public function calculate(operation:String):void {			var serviceURL:String = GoogleAPIServiceURL.GOOGLE_CALCULATOR_SERVICE;			var loader:URLLoader = new URLLoader();			var request:URLRequest = new URLRequest(serviceURL);			operation = APIUtil.formatInputString(operation);			var vars:URLVariables = new URLVariables();			vars.q = operation;			request.data = vars;			loader.addEventListener(Event.COMPLETE, onCalcResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.load(request);		}		//-----Handlers-------------------------------------		private function onCalcResponse(event:Event):void {			var json:Object = JSON.decode("" + event.target.data);			if (json.error == "") {				var resultCC:GoogleCalculation = new GoogleCalculation();				resultCC.input = json.lhs as String;				resultCC.result = json.rhs as String;				resultCC.isCurrencyConversion = false;				dispatchEvent(new GoogleAPIEvent(GoogleAPIEvent.CALCULATOR_RESULT, resultCC));			} else {				var error:String = json.error as String;				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, "Calculator error: " + error));			}		}		private function onIOError(event:IOErrorEvent):void {			dispatchEvent(new GoogleAPIEvent(GoogleAPIEvent.ON_ERROR, "IOERROR: " + event.text));		}	}}