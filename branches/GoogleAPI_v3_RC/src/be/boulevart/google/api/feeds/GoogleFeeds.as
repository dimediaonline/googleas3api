/** * GOOGLE API - AS3 LIBRARY * * @author Joris Timmerman * @version 3.0 * * GoogleFeeds - Parse, find or check RSS feeds using Google's Ajax Feed Api. * Build by Joris Timmerman, these classes uses the Google Ajax API * * These classes are using methods and classes from the Adobe Core Libary, downloadable @ http://code.google.com/p/as3corelib/ * * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE AJAX API * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) */package be.boulevart.google.api.feeds {	import be.boulevart.google.api.core.GoogleAPIKeyStore;	import be.boulevart.google.api.core.GoogleAPIServiceURL;	import be.boulevart.google.api.core.GoogleAPISettings;	import be.boulevart.google.api.feeds.data.GoogleFeed;	import be.boulevart.google.api.feeds.data.GoogleFeedFindResult;	import be.boulevart.google.api.feeds.data.GoogleFeedLookupResult;	import be.boulevart.google.api.feeds.data.types.GoogleFeedEntry;	import be.boulevart.google.events.GoogleAPIErrorEvent;	import be.boulevart.google.events.GoogleAPIEvent;	import be.boulevart.google.utils.APIUtil;		import com.adobe.serialization.json.JSON;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.utils.escapeMultiByte;
	/**	 * With the AJAX Feed API, you can find and download any public Atom or RSS feed.	 * @author Joris Timmerman	 */	public class GoogleFeeds extends EventDispatcher {		/**		 * Downloads this feed from Google's servers<br/>		 * Catch result using EventListener <b>GoogleAPIEvent.FEEDS_GET_RESULT</b><br/>		 * <br/>GoogleAPIEvent.data contains instance of <b><listing version="3.0">GoogleFeed</listing version="3.0"></b><br/>		 * @example Example:		 * <listing version="3.0">		 * var googleFeed:GoogleFeeds = new GoogleFeeds();		 * googleFeed.getFeed("http://www.digg.com/rss/index.xml");		 * googleFeed.addEventListener(GoogleAPIEvent.FEEDS_GET_RESULT,onFeedResult);		 *		 * catch API errors from Google:		 * googleFeed.addEventListener(GoogleAPIErrorEvent.API_ERROR, onApiError);		 * </listing>		 * @param feedURL The URL of to the feed to load		 * @param language This optional argument supplies the host language of the application making the request.<br/>If this argument is not present then the system will choose a value based on the value of the Accept-Language http header.<br/>If this header is not present, a value of <listing version="3.0">en</listing version="3.0"> is assumed.		 * @param numFeeds This optional argument supplies the number of entries to load from the feed specified by feedURL.<br/>A value of -1 indicates the maximum number of entries supported which at the time of this writing is 100.<br/>If this argument is not supplied, a value of 4 is assumed.		 * @param scoring By default, when a feed is loaded, the API returns a cached copy of the specified feed that is 100% in sync with the feed contents at the time that it was cached. By setting scoring to a value of <b>h</b>, you can instruct the system to return any additional historical entries that it might have in its cache.		 */		public function getFeed(feedURL:String, language:String = "", numFeeds:int = -99, scoring:String = ""):void {			var serviceURL:String = GoogleAPIServiceURL.FEED_SERVICE;			var loader:URLLoader = new URLLoader();			var request:URLRequest = new URLRequest(serviceURL);			feedURL = APIUtil.formatInputString(feedURL);			language = APIUtil.formatInputString(language);			scoring = APIUtil.formatInputString(scoring);			var vars:URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = APIUtil.formatInputString(feedURL);			if (language != "") {				vars.hl = language;			} else if (GoogleAPISettings.useMainLanguageAsDefaultLanguage) {				vars.hl = GoogleAPISettings.MAIN_LANGUAGE;			}			if (numFeeds != -99) {				vars.num = numFeeds;			}			if (scoring != "") {				vars.scoring = scoring;			}			if (GoogleAPIKeyStore.keyIsSet) {				vars.key = GoogleAPIKeyStore.API_KEY;			}			request.data = vars;			loader.addEventListener(Event.COMPLETE, onResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.load(request);		}
		/**		 * Find a feed. Will return a list of feeds that match the given query.		 * Catch result using EventListener <b>GoogleAPIEvent.FEEDS_FIND_RESULT</b><br/>		 * <br/>GoogleAPIEvent.data contains instance of <b><listing version="3.0">GoogleFeedFindResult</listing version="3.0"></b><br/>		 * <br/>Example:<br/>		 * <listing version="3.0">		 * var googleFeed:GoogleFeeds = new GoogleFeeds();		 * googleFeed.findFeed("Adobe");		 * googleFeed.addEventListener(GoogleAPIEvent.FEEDS_FIND_RESULT,onFeedFindResult);		 * <br/><br/>//catch API errors from Google:		 * googleFeed.addEventListener(GoogleAPIErrorEvent.API_ERROR, onApiError);		 * </listing>		 * @param query Keyword(s) to find the feed		 */		public function findFeed(query:String):void {			var serviceURL:String = GoogleAPIServiceURL.FEED_FIND_SERVICE;			var loader:URLLoader = new URLLoader();			var request:URLRequest = new URLRequest(serviceURL);			var vars:URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = query;			if (GoogleAPIKeyStore.keyIsSet) {				vars.key = GoogleAPIKeyStore.API_KEY;			}			request.data = vars;			loader.addEventListener(Event.COMPLETE, onFindResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.load(request);		}
		/**		 * Will return the associated feed, if it exists, for a given url.		 * Catch result using EventListener <b>GoogleAPIEvent.FEEDS_LOOKUP_RESULT</b><br/>		 * <br/>GoogleAPIEvent.data contains instance of <b><listing version="3.0">GoogleFeedLookupResult</listing version="3.0"></b><br/>		 * <br/>Example:<br/>		 * <listing version="3.0">		 * var googleFeed:GoogleFeeds = new GoogleFeeds();		 * googleFeed.lookupFeed("Adobe");		 * googleFeed.addEventListener(GoogleAPIEvent.FEEDS_LOOKUP_RESULT,onFeedLookupResult);		 * <br/><br/>//catch API errors from Google:		 * googleFeed.addEventListener(GoogleAPIErrorEvent.API_ERROR, onApiError);		 * </listing>		 * @param feedURL URL of the feed to lookup		 * */		public function lookupFeed(feedURL:String, language:String = ""):void {			var serviceURL:String = GoogleAPIServiceURL.FEED_LOOKUP_SERVICE;			var loader:URLLoader = new URLLoader();			var request:URLRequest = new URLRequest(serviceURL);			var vars:URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = feedURL;			if (language != "") {				vars.hl = language;			} else if (GoogleAPISettings.useMainLanguageAsDefaultLanguage) {				vars.hl = GoogleAPISettings.MAIN_LANGUAGE;			}			if (GoogleAPIKeyStore.keyIsSet) {				vars.key = GoogleAPIKeyStore.API_KEY;			}			request.data = vars;			loader.addEventListener(Event.COMPLETE, onLookUpResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.load(request);		}		//-----------------------------RESPONSES-----------------------------		private function onResponse(event:Event):void {			var json:Object = json.decode("" + event.target.data);			if (json.responseData != null) {				var feed:GoogleFeed = new GoogleFeed();				json = json.responseData.feed;				feed.author = json.author;				feed.description = json.description;				feed.feedType = json.type;				feed.title = json.title;				feed.link = json.link;				for each (var obj:Object in json.entries) {					var entry:GoogleFeedEntry = new GoogleFeedEntry();					entry.author = obj.author;					entry.content = obj.content;					entry.contentSnippet = obj.contentSnippet;					entry.link = obj.link;					entry.title = obj.title;					entry.publishedDate = new Date(obj.publishedDate);					entry.categories = obj.categories as Array;					feed.entries.push(entry);				}				dispatchEvent(new GoogleAPIEvent(GoogleAPIEvent.FEEDS_GET_RESULT, feed));			} else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));			}		}		private function onFindResponse(event:Event):void {			var json:Object = JSON.decode("" + event.target.data);			if (json.responseData != null) {				json = json.responseData;				var feedFindResult:GoogleFeedFindResult = new GoogleFeedFindResult();				feedFindResult.query = json.query;				for each (var o:Object in json.entries) {					var entry:GoogleFeedEntry = new GoogleFeedEntry();					entry.contentSnippet = o.contentSnippet;					entry.link = o.link;					entry.title = o.title;					entry.url = o.url;					feedFindResult.entries.push(entry);				}				dispatchEvent(new GoogleAPIEvent(GoogleAPIEvent.FEEDS_FIND_RESULT, feedFindResult));			} else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));			}		}		private function onLookUpResponse(event:Event):void {			var json:Object = JSON.decode("" + event.target.data);			if (json.responseData != null) {				json = json.responseData;				var lookupResult:GoogleFeedLookupResult = new GoogleFeedLookupResult();				lookupResult.query = json.query;				lookupResult.url = json.url;				dispatchEvent(new GoogleAPIEvent(GoogleAPIEvent.FEEDS_LOOKUP_RESULT, lookupResult));			} else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));			}		}
		private function onIOError(event:IOErrorEvent):void {			dispatchEvent(new GoogleAPIEvent(GoogleAPIEvent.ON_ERROR, "IOERROR: " + event.text));		}	}}