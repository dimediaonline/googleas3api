/** * GOOGLE SEARCH AS3 Library * * @author Joris Timmerman * @version 1.4 *  * GoogleLocalSearch - Search Google and produce search results relative to a geographic region * Build by Joris Timmerman, these classes uses the Google Ajax API *  * These classes are using methods and classes from the Adobe Core Libary, downloadable @ http://code.google.com/p/as3corelib/ *  * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE AJAX API * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) */package be.boulevart.google {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import com.adobe.serialization.json.JSON;	import com.adobe.utils.StringUtil;	import be.boulevart.google.data.GoogleLocalSearchItem;	import be.boulevart.google.events.GoogleSearchEvent;			/**	 * @author joris	 */	public class GoogleLocalSearch extends EventDispatcher {		/**		 * Start search operation, when operation is done, will dispatch an GoogleSearchEvent.LOCAL_SEARCH_RESULT event with an array of GoogleLocalSearchItem-objects.		 * Will deliver 8 results max, you can get more using the startValue param. (paging)		 * @param searchString search string, what do you wanna find?		 * @param startValue sets a start value for paging (fe. 9; delivers search results from result 9 up to 16)		 * @param centerPointOfSearch This optional argument supplies the search center point for a local search. It's value is a comma seperated latitude/longitude pair, e.g., sll=48.8565,2.3509.		 * @param typeOfListing This optional argument specifies which type of listing the user is interested in		 * @param lang set main language using language code		 */		public function search(searchString : String,startValue : int = 0,centerPointOfSearch : String = "0,0",typeOfListing : String = "",lang : String = "") : void {			var serviceURL : String = 'http://ajax.googleapis.com/ajax/services/search/local';						var loader : URLLoader = new URLLoader()			var query : String = "?v=1.0"						query += "&q=" + searchString						if(startValue > 0) {				query += "&start=" + startValue			}						query += "&rsz=large" 				if(StringUtil.trim(lang).length > 0) {				query += "&hl=" + lang			}				query += "&sll=" + centerPointOfSearch						if(StringUtil.trim(typeOfListing).length > 0) {				query += "&mrt=" + typeOfListing			}							var request : URLRequest = new URLRequest(serviceURL + query)						loader.addEventListener(Event .COMPLETE , onResponse)			loader.addEventListener(IOErrorEvent.IO_ERROR , onIOError); 			loader.load(request)		}		private function onResponse(event : Event) : void {			var json : Object = JSON.decode("" + event.target.data);			var results : Array = json.responseData.results as Array			var resultaten : Array = new Array()			for each(var data:Object in results) {				var item : GoogleLocalSearchItem = new GoogleLocalSearchItem()				item.title = data.titleNoFormatting				item.longitude = data.lng				item.latitude = data.lat				item.url = data.url				item.longitude = data.lng				item.streetAdress = data.streetAddress				item.city = data.city				item.region = data.region				item.country = data.country				item.phoneNumbers = data.phoneNumbers as Array				item.drivingDirectionsUrl = data.ddUrl				item.drivingDirectionsUrlFromHere = data.ddUrlFromHere				item.drivingDirectionsUrlToHere = data.ddUrlToHere								item.staticMapURL = data.staticMapUrl				item.listingType = data.listingType				item.content = data.content				resultaten.push(item)			}						dispatchEvent(new GoogleSearchEvent(GoogleSearchEvent.LOCAL_SEARCH_RESULT , resultaten))		}		private function onIOError(event : IOErrorEvent) : void {  			dispatchEvent(new GoogleSearchEvent(GoogleSearchEvent.ON_ERROR , "IOERROR: " + event.text))		} 	}}