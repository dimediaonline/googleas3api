/** * GOOGLE API - AS3 LIBRARY * /** * @author Joris Timmerman * @version 2.0 *  * GoogleNewsSearch - Search blog sites using Google * Build by Joris Timmerman, these classes uses the Google Ajax API *  * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE AJAX API * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) */ package be.boulevart.google.ajaxapi.search.news {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import com.adobe.serialization.json.JSON;	import com.adobe.utils.StringUtil;	import be.boulevart.google.ajaxapi.search.GoogleSearchResult;	import be.boulevart.google.ajaxapi.search.news.data.GoogleNewsItem;	import be.boulevart.google.ajaxapi.search.news.data.types.GoogleNewsImage;	import be.boulevart.google.ajaxapi.search.news.data.types.GoogleNewsRelatedStory;	import be.boulevart.google.apicore.GoogleApiKeyStore;	import be.boulevart.google.events.GoogleAPIErrorEvent;	import be.boulevart.google.events.GoogleApiEvent;		/**	 * @author joris	 */	public class GoogleNewsSearch extends EventDispatcher {		public function GoogleNewsSearch() {		}		/**		 * @param scoring This optional argument tells the video search system how to order results. Results may be ordered by relevance (which is the default) or by date. To select ordering by relevance, do not supply this argument. To select ordering by date, set scoring as scoring=d		 * @param location geotag, searches on location, for example; brussels		 * @param topic This optional argument tells the news search system to scope search results to a particular topic.		 * @param edition specify the edition, fe. us, uk, fr_ca,nl_be		 */		public function search(searchString : String,startValue : int = 0,scoring : String = "",location : String = "",googleNewsTopic : String = "",edition : String = "",lang : String = "") : void {			var serviceURL : String = 'http://ajax.googleapis.com/ajax/services/search/news';						var loader : URLLoader = new URLLoader()			var query : String = "?v=1.0"						query += "&q=" + searchString						if(startValue > 0) {				query += "&start=" + startValue			}						query += "&rsz=large" 				if(StringUtil.trim(lang).length > 0) {				query += "&hl=" + lang			}							if(StringUtil.trim(scoring).length > 0) {				query += "&scoring=" + scoring			}											if(StringUtil.trim(location).length > 0) {				query += "&geo=" + location			}							if(StringUtil.trim(googleNewsTopic).length > 0) {				query += "&topic=" + googleNewsTopic			}						if(StringUtil.trim(edition).length > 0) {				query += "&ned=" + edition			}								query += GoogleApiKeyStore.apiKeyUrlQuery						var request : URLRequest = new URLRequest(serviceURL + query)						loader.addEventListener(Event .COMPLETE , onResponse)			loader.addEventListener(IOErrorEvent.IO_ERROR , onIOError); 			loader.load(request)		}		private function onResponse(event : Event) : void {			var json : Object = JSON.decode("" + event.target.data);			if(json.responseData != null) {				var results : Array = json.responseData.results as Array								var resultaten : Array = new Array()				for each(var data:Object in results) {					var item : GoogleNewsItem = new GoogleNewsItem()					item.title = data.title					item.titleNoFormatting = data.titleNoFormatting					item.unescapedUrl = data.unescapedUrl					item.url = data.url					item.cluster_url = data.clusterUrl					item.content = data.content					item.publisher = data.publisher					item.location = data.location					item.relatedStories = new Array()										for each(var rstory in data.relatedStories) {						var story : GoogleNewsRelatedStory = new GoogleNewsRelatedStory()						story.title = rstory.title						story.titleNoFormatting = rstory.titleNoFormatting						story.unescapedUrl = rstory.unescapedUrl						story.url = rstory.url						story.publisher = rstory.publisher						story.published = rstory.publishedDate						story.location = rstory.location						item.relatedStories.push(story)					}										if(data.image != null) {						var imgData : Object = data.image						var img : GoogleNewsImage = new GoogleNewsImage()						img.title = imgData.title						img.titleNoFormatting = imgData.titleNoFormatting						img.url = imgData.url						img.publisher = imgData.publisher											img.thumbUrl = imgData.tbUrl						img.thumbWidth = imgData.tbWidth						img.thumbHeight = imgData.tbHeight						item.image = img					}else {						item.image = new GoogleNewsImage()					}					resultaten.push(item)				}				var searchItem : GoogleSearchResult = new GoogleSearchResult()				if(json.responseData.cursor.currentPageIndex != null) {					searchItem.currentPageIndex = json.responseData.cursor.currentPageIndex				}				if(json.responseData.cursor.pages != null) {					searchItem.numPages = json.responseData.cursor.pages.length				}				searchItem.results = resultaten								if(json.responseData.cursor.estimatedResultCount != null) {					searchItem.estimatedNumResults = json.responseData.cursor.estimatedResultCount				}				dispatchEvent(new GoogleApiEvent(GoogleApiEvent.NEWS_SEARCH_RESULT , searchItem))			}else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR , json.responseDetails as String , json.responseStatus as int))			}		}		private function onIOError(event : IOErrorEvent) : void {  			dispatchEvent(new GoogleApiEvent(GoogleApiEvent.ON_ERROR , "IOERROR: " + event.text))		} 	}}