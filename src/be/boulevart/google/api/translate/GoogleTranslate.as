/** * GOOGLE API - AS3 LIBRARY * * @author Joris Timmerman * @version 3.0 * * GoogleTranslations - Translate using Google * Build by Joris Timmerman, these classes uses the Google Ajax API * * These classes are using methods and classes from the Adobe Core Libary, downloadable @ http://code.google.com/p/as3corelib/ * * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE AJAX API * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) * */package be.boulevart.google.api.translate {	import be.boulevart.google.api.core.GoogleAPIKeyStore;	import be.boulevart.google.api.core.GoogleAPIServiceURL;	import be.boulevart.google.api.core.GoogleAPISettings;	import be.boulevart.google.api.translate.data.GoogleLanguageDetectionResult;	import be.boulevart.google.api.translate.data.GoogleTranslationResult;	import be.boulevart.google.events.GoogleAPIErrorEvent;	import be.boulevart.google.events.GoogleAPIEvent;	import be.boulevart.google.utils.APIUtil;		import com.adobe.serialization.json.JSON;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.utils.escapeMultiByte;

	/**	 * Translate using the Google Translate engine	 * @author joris	 */	public class GoogleTranslate extends EventDispatcher {		private var _orig:String;		private var _from:String;		private var _to:String;		/**		 * Translate a string from one given language into another.<br/>		 * For the params langFromCode and langToCode, you can base yourself on the constants set in the LanguageCode class<br/>		 * Catch result using EventListener <b>GoogleAPIEvent.TRANSLATION_RESULT</b><br/>		 * <br/>GoogleAPIEvent.data contains instance of <b><listing version="3.0">GoogleTranslationResult</listing version="3.0"></b><br/>		 * @example Example:		 * <listing version="3.0">		 * var googleTranslate:GoogleTranslate = new GoogleTranslate();		 *		 * //googleTranslate.translate("goodmorning", "en", "nl");		 * googleTranslate.translate("goodmorning", LanguageCodes.ENGLISH, LanguageCodes.DUTCH);		 * googleTranslate.addEventListener(GoogleAPIEvent.TRANSLATION_RESULT, onTranslationResult);		 *		 * //catch API errors from Google:		 * googleTranslate.addEventListener(GoogleAPIErrorEvent.API_ERROR, onApiError);		 * </listing>		 * @param textToTranslate The string that needs to be translated		 * @param langFromCode Language code of the original language (see LanguageCodes-class for available constants)		 * @param langToCode Language code of the targeted language (see LanguageCodes-class for available constants)		 */		public function translate(textToTranslate:String, langFromCode:String, langToCode:String):void {			var serviceURL:String = GoogleAPIServiceURL.TRANSLATE_SERVICE;			textToTranslate = APIUtil.formatInputString(textToTranslate);			langFromCode = APIUtil.formatInputString(langFromCode) ;			langToCode = APIUtil.formatInputString(langToCode);			_orig = textToTranslate;			_from = langFromCode;			_to = langToCode;			var request:URLRequest = new URLRequest(serviceURL);			var loader:URLLoader = new URLLoader();			var vars:URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = textToTranslate;			vars.langpair = langFromCode + "|" + langToCode;			if (GoogleAPIKeyStore.keyIsSet) {				vars.key = GoogleAPIKeyStore.API_KEY;			}			request.data = vars;			loader.addEventListener(Event.COMPLETE, onResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.load(request);		}		/**		 * Determine the language of a text<br/>		 * Catch result using EventListener <b>GoogleAPIEvent.TRANSLATION_LANGUAGE_DETECTION_RESULT</b><br/>		 * <br/>GoogleAPIEvent.data contains instance of <b><listing version="3.0">GoogleLanguageDetectionResult</listing version="3.0"></b><br/>		 * @example Example:		 * <listing version="3.0">		 * var googleTranslate:GoogleTranslate = new GoogleTranslate();		 * googleTranslate.detectLanguage("goodmorning");		 * googleTranslate.addEventListener(GoogleAPIEvent.TRANSLATION_LANGUAGE_DETECTION_RESULT, onLangDetectionResult);		 * <br/><br/>//catch API errors from Google:		 * googleTranslate.addEventListener(GoogleAPIErrorEvent.API_ERROR, onApiError);		 * </listing>		 * @param text Text to determine the language of		 */		public function detectLanguage(text:String):void {			var serviceURL:String = GoogleAPIServiceURL.TRANSLATE_DETECTLANG_SERVICE;			var request:URLRequest = new URLRequest(serviceURL);			var loader:URLLoader = new URLLoader();			text = APIUtil.formatInputString(text);			var vars:URLVariables = new URLVariables();			vars.v = "1.0";			vars.q = text;			request.data = vars;			loader.addEventListener(Event.COMPLETE, onDetectionResponse);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.load(request);		}		private function onResponse(event:Event):void {			var json:Object = JSON.decode("" + event.target.data);			if (json.responseData) {				var results:String = json.responseData.translatedText as String;				var translationResult:GoogleTranslationResult = new GoogleTranslationResult();				translationResult.result = results;				translationResult.from = _from;				translationResult.to = _to;				translationResult.originalInput = _orig;				_from = null;				_to = null;				_orig = null;				dispatchEvent(new GoogleAPIEvent(GoogleAPIEvent.TRANSLATION_RESULT, translationResult));			} else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails, json.responseStatus as int));			}		}		private function onDetectionResponse(event:Event):void {			var json:Object = JSON.decode("" + event.target.data);			if (json.responseData != null) {				var language:String = json.responseData.language as String;				var isReliable:Boolean = json.responseData.isReliable as Boolean;				var confidence:Number = json.responseData.confidence as Number;				var detect:GoogleLanguageDetectionResult = new GoogleLanguageDetectionResult();				detect.language = language;				detect.isReliable = isReliable;				detect.confidence = confidence;				dispatchEvent(new GoogleAPIEvent(GoogleAPIEvent.TRANSLATION_LANGUAGE_DETECTION_RESULT, detect));			} else {				dispatchEvent(new GoogleAPIErrorEvent(GoogleAPIErrorEvent.API_ERROR, json.responseDetails as String, json.responseStatus as int));			}		}		private function onIOError(event:IOErrorEvent):void {			dispatchEvent(new GoogleAPIEvent(GoogleAPIEvent.ON_ERROR, "IOERROR: " + event.text));		}	}}