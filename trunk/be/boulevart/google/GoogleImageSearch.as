/** * GOOGLE SEARCH AS3 Library *  * @author Joris Timmerman * @version 1.4 *  * GoogleImageSearch - Search images using Google Images Search * Build by Joris Timmerman, these classes uses the Google Ajax API *  * These classes are using methods and classes from the Adobe Core Libary, downloadable @ http://code.google.com/p/as3corelib/ *  * SPECIAL THANKS TO GOOGLE FOR PROVIDING THE AJAX API * THIS IS AN OPEN SOURCE PROJECT DELIVERED BY BOULEVART NV (www.boulevart.be) */package be.boulevart.google {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import com.adobe.serialization.json.JSON;	import com.adobe.utils.StringUtil;	import be.boulevart.google.data.GoogleImage;	import be.boulevart.google.data.types.GoogleImageSafeMode;	import be.boulevart.google.events.GoogleSearchEvent;		/**	 * @author joris	 */	public class GoogleImageSearch extends EventDispatcher {		/**		 * Start search operation, when operation is done, will dispatch an GoogleSearchEvent.IMAGE_SEARCH_RESULT event with an array of GoogleImage-objects.		 * Will deliver 8 results max, you can get more using the startValue param. (paging)		 * @param searchString search string, what do you wanna find?		 * @param startValue sets a start value for paging (fe. 9; delivers search results from result 9 up to 16)		 * @param safeMode Restrict results with safety filter, you can find all values in GoogleImageSafeMode (package data.type)		 * @param size Restrict results to images of a certain sizer, you can find all values in GoogleImageSize (package data.type)		 * @param colorization Restrict results to images of a certain colorization, you can find all values in GoogleImageColorization (package data.type)		 * @param imageType Restrict results to images of a certain type, you can find all values in GoogleImageType (package data.type)		 * @param filetype Restrict results to images with a certain extension, you can find all values in GoogleImageFiletype (package data.type)		 * @param restrictToCreativeCommons Restrict results to CreativeCommons licensed images		 * @param lang set main language using language code		 */		public function search(searchString : String,startValue : int = 0,safeMode : String = GoogleImageSafeMode.OFF,size : String = "",colorization : String = "",imageType : String = "",filetype : String = "",restrictToCreativeCommons : Boolean = false,lang : String = "") : void {			var serviceURL : String = 'http://ajax.googleapis.com/ajax/services/search/images';						var loader : URLLoader = new URLLoader()			var query : String = "?v=1.0"						query += "&q=" + searchString						if(startValue > 0) {				query += "&start=" + startValue			}			query += "&rsz=large" 				if(StringUtil.trim(lang).length > 0) {				query += "&hl=" + lang			}					query += "&safe=" + safeMode						if(StringUtil.trim(size).length > 0) {				query += "&imgsz=" + size			}						if(StringUtil.trim(colorization).length > 0) {				query += "&imgc=" + colorization			}			if(StringUtil.trim(imageType).length > 0) {				query += "&imgsz=" + imageType			}			if(StringUtil.trim(filetype).length > 0) {				query += "&imgsz=" + filetype			}			if(restrictToCreativeCommons) {				query += "&restrict=cc_attribute"			}															var request : URLRequest = new URLRequest(serviceURL + query)						loader.addEventListener(Event .COMPLETE , onResponse)			loader.addEventListener(IOErrorEvent.IO_ERROR , onIOError); 			loader.load(request)		}		private function onResponse(event : Event) : void {			var json : Object = JSON.decode("" + event.target.data);			var results : Array = json.responseData.results as Array			var resultaten : Array = new Array()			for each(var data:Object in results) {				var item : GoogleImage = new GoogleImage()				item.content = data.content				item.title = data.title				item.titleNoFormatting = data.titleNoFormatting				item.unescapedUrl = data.unescapedUrl				item.url = data.url				item.visibleUrl = data.visibleUrl							item.contentNoFormatting = data.contentNoFormatting				item.height = data.height				item.width = data.width				item.originalContextUrl = data.originalContextUrl				item.thumbHeight = data.tbHeight				item.thumbWidth = data.tbWidth				item.thumbUrl = data.tbUrl				resultaten.push(item)			}						dispatchEvent(new GoogleSearchEvent(GoogleSearchEvent.IMAGE_SEARCH_RESULT , resultaten))		}		private function onIOError(event : IOErrorEvent) : void {  			dispatchEvent(new GoogleSearchEvent(GoogleSearchEvent.ON_ERROR , "IOERROR: " + event.text))		} 	}}